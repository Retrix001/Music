import discord
from discord.ext import commands
import youtube_dl

class MusicPlayer:
    def __init__(self, ctx):
        self.ctx = ctx
        self.voice_client = None
        self.queue = []
        self.current_song = None
        self.loop = False

    async def join(self):
        if self.voice_client is not None:
            await self.voice_client.disconnect()
        self.voice_client = await self.ctx.author.voice.channel.connect()

    async def play(self):
        while True:
            if not self.queue:
                if self.loop:
                    self.queue.append(self.current_song)
                else:
                    break

            song = self.queue.pop(0)
            self.current_song = song
            source = await discord.FFmpegOpusAudio.from_probe(song['url'])
            self.ctx.send(f"Now playing: {song['title']}")
            self.voice_client.play(source)
            await self.wait_for_song_end()

    async def wait_for_song_end(self):
        while self.voice_client.is_playing() or self.voice_client.is_paused():
            await asyncio.sleep(1)
        if not self.queue:
            self.current_song = None
            self.ctx.send("The queue is empty!")
        elif self.loop:
            self.queue.append(self.current_song)

    async def pause(self):
        self.voice_client.pause()

    async def resume(self):
        self.voice_client.resume()

    async def skip(self):
        self.voice_client.stop()

    def toggle_loop(self):
        self.loop = not self.loop
        return self.loop

    async def add_song(self, query):
        with youtube_dl.YoutubeDL() as ydl:
            info = ydl.extract_info(query, download=False)
            url = info['formats'][0]['url']
            self.queue.append({
                'title': info['title'],
                'url': url
            })

class MusicBot(commands.Bot):
    def __init__(self):
        super().__init__(command_prefix='!')

    @commands.command()
    async def join(self, ctx):
        player = MusicPlayer(ctx)
        await player.join()

    @commands.command()
    async def play(self, ctx, query):
        player = MusicPlayer(ctx)
        await player.add_song(query)
        if not player.voice_client.is_playing():
            await player.play()

    @commands.command()
    async def pause(self, ctx):
        player = MusicPlayer(ctx)
        await player.pause()

    @commands.command()
    async def resume(self, ctx):
        player = MusicPlayer(ctx)
        await player.resume()

    @commands.command()
    async def skip(self, ctx):
        player = MusicPlayer(ctx)
        await player.skip()

    @commands.command()
    async def loop(self, ctx):
        player = MusicPlayer(ctx)
        loop_status = player.toggle_loop()
        await ctx.send(f"Loop is now {'on' if loop_status else 'off'}.")

bot = MusicBot()
bot.run('YOUR_BOT_TOKEN_HERE')
